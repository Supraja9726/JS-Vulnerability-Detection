import fs from "fs";
import { evilRegExes } from "./utils.mjs";
import { semgrep } from "./utils.mjs";

// execute the tool: node "detectRedos&protoSemgrep.mjs" path/to/functions path/to/outputJSON path/to/protoRules path/to/RedosRules
 
const INPUT = process.argv[2];
const OUTPUT = process.argv[3];

const PROTORULES = process.argv[4];
const REDOSRULES = process.argv[5];

// Prints all Input data -- debug
console.log("Input:",INPUT);
console.log("Output:",OUTPUT);
console.log("ProtoRules:",PROTORULES);
console.log("RedosRules:",REDOSRULES);

const data = JSON.parse(fs.readFileSync(INPUT));

console.log("Starting proto_semgrep: ", new Date());
let start = 0;
let i = 0;
for(const vuln of data){
    i++;
    console.time("Single file");

    const protoResults = semgrep(vuln.function, PROTORULES)
    if (protoResults.length) {
        vuln.protoPollution = true;
        vuln.matches = protoResults;
    }

    const regexes = evilRegExes(vuln.function);
    if (regexes.length) {
        vuln.evilRe = regexes;
        const redosResults = semgrep(vuln.function, REDOSRULES)
        if (redosResults.length) {
            vuln.redos = true;
            vuln.matches = redosResults;
        }
    }
    
    if (vuln.evilRe || vuln.protoPollution) {
        fs.appendFileSync(OUTPUT, JSON.stringify(vuln) + ",\n");
    }
    console.log(i + " out of " + (data.length+start))
    fs.writeFileSync("./lastIndex.txt", i.toString());
    console.timeEnd("Single file");
}

console.log("semgrep done", new Date());
